# Import necessary libraries
import itertools            # Library for efficient looping and iteration
import random               # Library for random number generation
import json                 # Library for working with JSON data
import numpy as np          # Library for numerical computations
import pandas as pd         # Library for data manipulation and analysis
from matplotlib import pyplot as plt  # Library for creating visualizations
from matplotlib.patches import Rectangle  # Library for drawing rectangles in plots
import seaborn as sns      # Library for creating informative and attractive statistical graphics
from tqdm import tqdm       # Library for adding progress bars to loops
import networkx as nx       # Library for creating and manipulating networks/graphs


def simulate_poisson_process(lmbda, t_start, t_end):
    """
    Simulates a Poisson process with a given arrival rate (lambda) within a specified time interval.

    :param lmbda: Arrival rate of edges (lambda) for the Poisson process.
    :param t_start: Start time of the community.
    :param t_end: End time of the community.
    :return: An array of arrival times of events generated by the Poisson process.
    """
    time_frame = t_end - t_start

    # Generate a random number of edges according to a Poisson distribution
    k = np.random.poisson(time_frame * lmbda)

    # Generate random arrival times for the events within the specified time interval
    arrival_times = np.random.uniform(t_start, t_end, k)

    # If no arrival times were generated, create a single random arrival time
    if len(arrival_times) == 0:
        arrival_times = np.array([np.random.uniform(t_start, t_end)])

    # Round the arrival times to two decimal places for cleaner output
    return arrival_times.round(2)